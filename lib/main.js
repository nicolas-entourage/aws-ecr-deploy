"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@actions/core");
const exec_1 = require("@actions/exec");
const uuid_1 = require("uuid");
const inputs_1 = require("./inputs");
async function run() {
    core.debug(':: Loading input params');
    const inputs = new inputs_1.default();
    const accountUrl = `${inputs.AwsAccountID}.dkr.ecr.${inputs.Region}.amazonaws.com`;
    // Login to AWS ECR
    await awsEcrLogin(inputs);
    // Create ECR Repo
    await awsCreateEcrRepo(inputs);
    // Build the Dockerfile image
    await buildImage(inputs, accountUrl);
    // Deploy built image tags to AWS ECR
    await deployToEcr(inputs, accountUrl);
}
async function runAws(inputs, command) {
    let cmd = '';
    let err = '';
    let stopToken = uuid_1.v4();
    let opts = {
        cwd: './',
        silent: true,
        listeners: {
            stdout: (data) => {
                cmd += data.toString();
            },
            stderr: (data) => {
                err += data.toString();
            }
        },
    };
    core.info(`::stop-commands::${stopToken}`);
    await exec_1.exec(`AWS_ACCESS_KEY_ID=${inputs.AccessKeyID} AWS_SECRET_ACCESS_KEY=${inputs.SecretAccessKey} AWS_REGION=${inputs.Region} ${command}`, undefined, opts);
    core.info(`::${stopToken}::`);
    if (err.length > 0) {
        throw err;
    }
}
async function awsEcrLogin(inputs) {
    core.info('== LOGIN INTO AWS ECR ==');
    let loginCmd = '';
    let err = '';
    let stopToken = uuid_1.v4();
    let opts = {
        cwd: './',
        silent: true,
        listeners: {
            stdout: (data) => {
                loginCmd += data.toString();
            },
            stderr: (data) => {
                err += data.toString();
            }
        },
    };
    core.info('== LOGGING INTO AWS ECR ==');
    try {
        await runAws(inputs, `aws ecr get-login --no-include-email --region ${inputs.Region}`);
    }
    catch (e) {
        core.error(e);
        throw new Error('Failed to retrieve docker login to AWS ECR. Perhaps the AWS credentials do not have the correct permission');
    }
    core.info(`::stop-commands::${stopToken}`);
    await exec_1.exec(loginCmd, undefined, opts);
    core.info(`::${stopToken}::`);
    core.info('== FINISHED LOGIN ==');
}
function getEcrRepoName(inputs) {
    if (inputs.EcrRepoName.length > 0) {
        return inputs.EcrRepoName;
    }
    // default
    return (process.env.GITHUB_REPOSITORY || '').toLocaleLowerCase();
}
function getEcrTags(accountUrl, repoName, inputTags) {
    let tags = inputTags.split(',');
    const ecrTags = [];
    // Add the ref tag if code is a checked out release tag
    if ((process.env.GITHUB_REF || '').startsWith('refs/tags')) {
        const tag = (process.env.GITHUB_REF || '').split('/').pop();
        if (tag !== '' || tag !== undefined) {
            ecrTags.push(`${accountUrl}/${repoName}:${tag}`);
        }
    }
    // Build the tags
    for (const tag of tags) {
        ecrTags.push(`${accountUrl}/${repoName}:${tag}`);
    }
    return ecrTags;
}
async function awsCreateEcrRepo(inputs) {
    core.info('== CHECKING FOR ECR REPO ==');
    const repoName = getEcrRepoName(inputs);
    try {
        await runAws(inputs, `aws ecr describe-repositories --repository-names "${repoName}"`);
    }
    catch (_a) {
        // Repo doesn't exist or failed. Try creating if specified.
        if (inputs.ShouldCreateRepo === 'true') {
            core.info('== CREATING ECR REPO ==');
            await runAws(inputs, `aws ecr create-repository --repository-name ${repoName}`);
            core.info(`== FINISHED CREATING ECR REPO [ ${repoName} ] ==`);
            return;
        }
        else {
            core.setFailed('== ECR Repository is missing ==');
            throw new Error(`ECR repo named [ ${repoName} ] was not found. Perhaps the spelling was incorrect?`);
        }
    }
    core.info('== REPO FOUND ==');
}
async function buildImage(inputs, accountUrl) {
    core.info('== BUILD IMAGE FROM DOCKERFILE ==');
    const repoName = getEcrRepoName(inputs);
    const ecrTags = getEcrTags(accountUrl, repoName, inputs.EcrTags);
    let tags = ecrTags.join(' -t ');
    if (tags.length > 0) {
        tags = `-t ${tags}`;
    }
    await exec_1.exec(`docker build ${inputs.DockerBuildArgs} -f ${inputs.DockerfilePath} ${tags} .`, undefined, {
        cwd: inputs.ProjectPath,
    });
    core.info('== FINISHED BUILDING IMAGE ==');
}
async function deployToEcr(inputs, accountUrl) {
    core.info('== DEPLOYING TO ECR ==');
    core.debug(`:: ECR Account URL: ${accountUrl}`);
    const repoName = getEcrRepoName(inputs);
    const ecrTags = getEcrTags(accountUrl, repoName, inputs.EcrTags);
    for (const tag of ecrTags) {
        await exec_1.exec(`docker push ${tag}`);
    }
    core.info('== FINISHED DEPLOYMENT ==');
}
try {
    run();
}
catch (error) {
    core.error(error);
    core.setFailed(error.message);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXNDO0FBQ3RDLHdDQUFxQztBQUVyQywrQkFBb0M7QUFDcEMscUNBQThCO0FBRTlCLEtBQUssVUFBVSxHQUFHO0lBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFNLEVBQUUsQ0FBQztJQUU1QixNQUFNLFVBQVUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLFlBQVksTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLENBQUM7SUFFbkYsbUJBQW1CO0lBQ25CLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTFCLGtCQUFrQjtJQUNsQixNQUFNLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLDZCQUE2QjtJQUM3QixNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFckMscUNBQXFDO0lBQ3JDLE1BQU0sV0FBVyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsS0FBSyxVQUFVLE1BQU0sQ0FBQyxNQUFjLEVBQUUsT0FBZTtJQUNuRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLFNBQVMsR0FBRyxTQUFNLEVBQUUsQ0FBQztJQUV6QixJQUFJLElBQUksR0FBZ0I7UUFDdEIsR0FBRyxFQUFFLElBQUk7UUFDVCxNQUFNLEVBQUUsSUFBSTtRQUNaLFNBQVMsRUFBRTtZQUNULE1BQU0sRUFBRSxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUN2QixHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLENBQUM7WUFDRCxNQUFNLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtnQkFD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QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsSUFBSTtJQUNGLEdBQUcsRUFBRSxDQUFDO0NBQ1A7QUFBQyxPQUFPLEtBQUssRUFBRTtJQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb3JlIGZyb20gJ0BhY3Rpb25zL2NvcmUnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ0BhY3Rpb25zL2V4ZWMnO1xuaW1wb3J0IHsgRXhlY09wdGlvbnMgfSBmcm9tICdAYWN0aW9ucy9leGVjL2xpYi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IElucHV0cyBmcm9tICcuL2lucHV0cyc7XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgY29yZS5kZWJ1ZygnOjogTG9hZGluZyBpbnB1dCBwYXJhbXMnKTtcbiAgY29uc3QgaW5wdXRzID0gbmV3IElucHV0cygpO1xuXG4gIGNvbnN0IGFjY291bnRVcmwgPSBgJHtpbnB1dHMuQXdzQWNjb3VudElEfS5ka3IuZWNyLiR7aW5wdXRzLlJlZ2lvbn0uYW1hem9uYXdzLmNvbWA7XG5cbiAgLy8gTG9naW4gdG8gQVdTIEVDUlxuICBhd2FpdCBhd3NFY3JMb2dpbihpbnB1dHMpO1xuXG4gIC8vIENyZWF0ZSBFQ1IgUmVwb1xuICBhd2FpdCBhd3NDcmVhdGVFY3JSZXBvKGlucHV0cyk7XG5cbiAgLy8gQnVpbGQgdGhlIERvY2tlcmZpbGUgaW1hZ2VcbiAgYXdhaXQgYnVpbGRJbWFnZShpbnB1dHMsIGFjY291bnRVcmwpO1xuXG4gIC8vIERlcGxveSBidWlsdCBpbWFnZSB0YWdzIHRvIEFXUyBFQ1JcbiAgYXdhaXQgZGVwbG95VG9FY3IoaW5wdXRzLCBhY2NvdW50VXJsKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuQXdzKGlucHV0czogSW5wdXRzLCBjb21tYW5kOiBzdHJpbmcpIHtcbiAgbGV0IGNtZCA9ICcnO1xuICBsZXQgZXJyID0gJyc7XG4gIGxldCBzdG9wVG9rZW4gPSB1dWlkdjQoKTtcblxuICBsZXQgb3B0czogRXhlY09wdGlvbnMgPSB7XG4gICAgY3dkOiAnLi8nLFxuICAgIHNpbGVudDogdHJ1ZSxcbiAgICBsaXN0ZW5lcnM6IHtcbiAgICAgIHN0ZG91dDogKGRhdGE6IEJ1ZmZlcikgPT4ge1xuICAgICAgICBjbWQgKz0gZGF0YS50b1N0cmluZygpO1xuICAgICAgfSxcbiAgICAgIHN0ZGVycjogKGRhdGE6IEJ1ZmZlcikgPT4ge1xuICAgICAgICBlcnIgKz0gZGF0YS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0sXG4gIH1cblxuICBjb3JlLmluZm8oYDo6c3RvcC1jb21tYW5kczo6JHtzdG9wVG9rZW59YCk7XG4gIGF3YWl0IGV4ZWMoYEFXU19BQ0NFU1NfS0VZX0lEPSR7aW5wdXRzLkFjY2Vzc0tleUlEfSBBV1NfU0VDUkVUX0FDQ0VTU19LRVk9JHtpbnB1dHMuU2VjcmV0QWNjZXNzS2V5fSBBV1NfUkVHSU9OPSR7aW5wdXRzLlJlZ2lvbn0gJHtjb21tYW5kfWAsIHVuZGVmaW5lZCwgb3B0cyk7XG4gIGNvcmUuaW5mbyhgOjoke3N0b3BUb2tlbn06OmApO1xuXG4gIGlmIChlcnIubGVuZ3RoID4gMCkge1xuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBhd3NFY3JMb2dpbihpbnB1dHM6IElucHV0cykge1xuICBjb3JlLmluZm8oJz09IExPR0lOIElOVE8gQVdTIEVDUiA9PScpXG5cbiAgbGV0IGxvZ2luQ21kID0gJyc7XG4gIGxldCBlcnIgPSAnJztcbiAgbGV0IHN0b3BUb2tlbiA9IHV1aWR2NCgpO1xuXG4gIGxldCBvcHRzOiBFeGVjT3B0aW9ucyA9IHtcbiAgICBjd2Q6ICcuLycsXG4gICAgc2lsZW50OiB0cnVlLFxuICAgIGxpc3RlbmVyczoge1xuICAgICAgc3Rkb3V0OiAoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICAgIGxvZ2luQ21kICs9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIH0sXG4gICAgICBzdGRlcnI6IChkYXRhOiBCdWZmZXIpID0+IHtcbiAgICAgICAgZXJyICs9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9XG5cbiAgY29yZS5pbmZvKCc9PSBMT0dHSU5HIElOVE8gQVdTIEVDUiA9PScpO1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgcnVuQXdzKGlucHV0cywgYGF3cyBlY3IgZ2V0LWxvZ2luIC0tbm8taW5jbHVkZS1lbWFpbCAtLXJlZ2lvbiAke2lucHV0cy5SZWdpb259YCk7XG4gIH0gY2F0Y2goZSkge1xuICAgIGNvcmUuZXJyb3IoZSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgZG9ja2VyIGxvZ2luIHRvIEFXUyBFQ1IuIFBlcmhhcHMgdGhlIEFXUyBjcmVkZW50aWFscyBkbyBub3QgaGF2ZSB0aGUgY29ycmVjdCBwZXJtaXNzaW9uJyk7XG4gIH1cblxuXG4gIGNvcmUuaW5mbyhgOjpzdG9wLWNvbW1hbmRzOjoke3N0b3BUb2tlbn1gKTtcbiAgYXdhaXQgZXhlYyhsb2dpbkNtZCwgdW5kZWZpbmVkLCBvcHRzKTtcbiAgY29yZS5pbmZvKGA6OiR7c3RvcFRva2VufTo6YCk7XG5cbiAgY29yZS5pbmZvKCc9PSBGSU5JU0hFRCBMT0dJTiA9PScpO1xufVxuXG5mdW5jdGlvbiBnZXRFY3JSZXBvTmFtZShpbnB1dHM6IElucHV0cyk6IHN0cmluZyB7XG4gIGlmIChpbnB1dHMuRWNyUmVwb05hbWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBpbnB1dHMuRWNyUmVwb05hbWU7XG4gIH1cblxuICAvLyBkZWZhdWx0XG4gIHJldHVybiAocHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE9TSVRPUlkgfHwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gZ2V0RWNyVGFncyhhY2NvdW50VXJsOiBzdHJpbmcsIHJlcG9OYW1lOiBzdHJpbmcsIGlucHV0VGFnczogc3RyaW5nKTogc3RyaW5nW10ge1xuICBsZXQgdGFncyA9IGlucHV0VGFncy5zcGxpdCgnLCcpO1xuICBjb25zdCBlY3JUYWdzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIEFkZCB0aGUgcmVmIHRhZyBpZiBjb2RlIGlzIGEgY2hlY2tlZCBvdXQgcmVsZWFzZSB0YWdcbiAgaWYgKChwcm9jZXNzLmVudi5HSVRIVUJfUkVGIHx8ICcnKS5zdGFydHNXaXRoKCdyZWZzL3RhZ3MnKSkge1xuICAgIGNvbnN0IHRhZyA9IChwcm9jZXNzLmVudi5HSVRIVUJfUkVGIHx8ICcnKS5zcGxpdCgnLycpLnBvcCgpO1xuXG4gICAgaWYgKHRhZyAhPT0gJycgfHwgdGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVjclRhZ3MucHVzaChgJHthY2NvdW50VXJsfS8ke3JlcG9OYW1lfToke3RhZ31gKTtcbiAgICB9XG4gIH1cblxuICAvLyBCdWlsZCB0aGUgdGFnc1xuICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG4gICAgZWNyVGFncy5wdXNoKGAke2FjY291bnRVcmx9LyR7cmVwb05hbWV9OiR7dGFnfWApO1xuICB9XG5cbiAgcmV0dXJuIGVjclRhZ3Ncbn1cblxuYXN5bmMgZnVuY3Rpb24gYXdzQ3JlYXRlRWNyUmVwbyhpbnB1dHM6IElucHV0cykge1xuICBjb3JlLmluZm8oJz09IENIRUNLSU5HIEZPUiBFQ1IgUkVQTyA9PScpO1xuXG4gIGNvbnN0IHJlcG9OYW1lID0gZ2V0RWNyUmVwb05hbWUoaW5wdXRzKTtcblxuICB0cnkge1xuICAgIGF3YWl0IHJ1bkF3cyhpbnB1dHMsIGBhd3MgZWNyIGRlc2NyaWJlLXJlcG9zaXRvcmllcyAtLXJlcG9zaXRvcnktbmFtZXMgXCIke3JlcG9OYW1lfVwiYCk7XG4gIH0gY2F0Y2gge1xuICAgIC8vIFJlcG8gZG9lc24ndCBleGlzdCBvciBmYWlsZWQuIFRyeSBjcmVhdGluZyBpZiBzcGVjaWZpZWQuXG4gICAgaWYgKGlucHV0cy5TaG91bGRDcmVhdGVSZXBvID09PSAndHJ1ZScpIHtcbiAgICAgIGNvcmUuaW5mbygnPT0gQ1JFQVRJTkcgRUNSIFJFUE8gPT0nKTtcbiAgICAgIGF3YWl0IHJ1bkF3cyhpbnB1dHMsIGBhd3MgZWNyIGNyZWF0ZS1yZXBvc2l0b3J5IC0tcmVwb3NpdG9yeS1uYW1lICR7cmVwb05hbWV9YCk7XG4gICAgICBjb3JlLmluZm8oYD09IEZJTklTSEVEIENSRUFUSU5HIEVDUiBSRVBPIFsgJHtyZXBvTmFtZX0gXSA9PWApO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcmUuc2V0RmFpbGVkKCc9PSBFQ1IgUmVwb3NpdG9yeSBpcyBtaXNzaW5nID09Jyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVDUiByZXBvIG5hbWVkIFsgJHtyZXBvTmFtZX0gXSB3YXMgbm90IGZvdW5kLiBQZXJoYXBzIHRoZSBzcGVsbGluZyB3YXMgaW5jb3JyZWN0P2ApO1xuICAgIH1cbiAgfVxuXG4gIGNvcmUuaW5mbygnPT0gUkVQTyBGT1VORCA9PScpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkSW1hZ2UoaW5wdXRzOiBJbnB1dHMsIGFjY291bnRVcmw6IHN0cmluZykge1xuICBjb3JlLmluZm8oJz09IEJVSUxEIElNQUdFIEZST00gRE9DS0VSRklMRSA9PScpO1xuICBjb25zdCByZXBvTmFtZSA9IGdldEVjclJlcG9OYW1lKGlucHV0cyk7XG4gIGNvbnN0IGVjclRhZ3MgPSBnZXRFY3JUYWdzKGFjY291bnRVcmwsIHJlcG9OYW1lLCBpbnB1dHMuRWNyVGFncyk7XG5cbiAgbGV0IHRhZ3MgPSBlY3JUYWdzLmpvaW4oJyAtdCAnKTtcblxuICBpZiAodGFncy5sZW5ndGggPiAwKSB7XG4gICAgdGFncyA9IGAtdCAke3RhZ3N9YFxuICB9XG5cblxuICBhd2FpdCBleGVjKGBkb2NrZXIgYnVpbGQgJHtpbnB1dHMuRG9ja2VyQnVpbGRBcmdzfSAtZiAke2lucHV0cy5Eb2NrZXJmaWxlUGF0aH0gJHt0YWdzfSAuYCwgdW5kZWZpbmVkLCB7XG4gICAgY3dkOiBpbnB1dHMuUHJvamVjdFBhdGgsXG4gIH0pO1xuICBjb3JlLmluZm8oJz09IEZJTklTSEVEIEJVSUxESU5HIElNQUdFID09Jyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlcGxveVRvRWNyKGlucHV0czogSW5wdXRzLCBhY2NvdW50VXJsOiBzdHJpbmcpIHtcbiAgY29yZS5pbmZvKCc9PSBERVBMT1lJTkcgVE8gRUNSID09Jyk7XG4gIGNvcmUuZGVidWcoYDo6IEVDUiBBY2NvdW50IFVSTDogJHthY2NvdW50VXJsfWApO1xuXG4gIGNvbnN0IHJlcG9OYW1lID0gZ2V0RWNyUmVwb05hbWUoaW5wdXRzKTtcbiAgY29uc3QgZWNyVGFncyA9IGdldEVjclRhZ3MoYWNjb3VudFVybCwgcmVwb05hbWUsIGlucHV0cy5FY3JUYWdzKTtcblxuICBmb3IgKGNvbnN0IHRhZyBvZiBlY3JUYWdzKSB7XG4gICAgYXdhaXQgZXhlYyhgZG9ja2VyIHB1c2ggJHt0YWd9YCk7XG4gIH1cblxuICBjb3JlLmluZm8oJz09IEZJTklTSEVEIERFUExPWU1FTlQgPT0nKTtcbn1cblxudHJ5IHtcbiAgcnVuKCk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb3JlLmVycm9yKGVycm9yKTtcbiAgY29yZS5zZXRGYWlsZWQoZXJyb3IubWVzc2FnZSk7XG59Il19